{"version":3,"file":"tonal.min.js","sources":["../packages/note/build/es6.js","../packages/array/build/es6.js","../packages/interval/build/es6.js","../packages/distance/build/es6.js","../packages/pcset/build/es6.js","../packages/scale/build/es6.js","../packages/chord/build/es6.js","../packages/dictionary/build/es6.js","../packages/tonal/index.js"],"sourcesContent":["var NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\r\nvar names = function (accTypes) {\r\n    return typeof accTypes !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) {\r\n            var acc = n[1] || \" \";\r\n            return accTypes.indexOf(acc) !== -1;\r\n        });\r\n};\r\nvar SHARPS = names(\" #\");\r\nvar FLATS = names(\" b\");\r\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\nfunction tokenize(str) {\r\n    if (typeof str !== \"string\")\r\n        str = \"\";\r\n    var m = REGEX.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\nvar NO_NOTE = Object.freeze({\r\n    pc: null,\r\n    name: null,\r\n    step: null,\r\n    alt: null,\r\n    oct: null,\r\n    octStr: null,\r\n    chroma: null,\r\n    midi: null,\r\n    freq: null\r\n});\r\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nvar properties = function (str) {\r\n    var tokens = tokenize(str);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\")\r\n        return NO_NOTE;\r\n    var letter = tokens[0], acc = tokens[1], octStr = tokens[2];\r\n    var p = {\r\n        letter: letter,\r\n        acc: acc,\r\n        octStr: octStr,\r\n        pc: letter + acc,\r\n        name: letter + acc + octStr,\r\n        step: (letter.charCodeAt(0) + 3) % 7,\r\n        alt: acc[0] === \"b\" ? -acc.length : acc.length,\r\n        oct: octStr.length ? +octStr : null,\r\n        chroma: 0,\r\n        midi: null,\r\n        freq: null\r\n    };\r\n    p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\r\n    p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\r\n    p.freq = midiToFreq(p.midi);\r\n    return Object.freeze(p);\r\n};\r\nvar memo = function (fn, cache) {\r\n    if (cache === void 0) { cache = {}; }\r\n    return function (str) { return cache[str] || (cache[str] = fn(str)); };\r\n};\r\nvar props = memo(properties);\r\nvar name = function (str) { return props(str).name; };\r\nvar pc = function (str) { return props(str).pc; };\r\nvar isMidiRange = function (m) { return m >= 0 && m <= 127; };\r\nvar midi = function (note) {\r\n    if (typeof note !== \"number\" && typeof note !== \"string\") {\r\n        return null;\r\n    }\r\n    var midi = props(note).midi;\r\n    var value = midi || midi === 0 ? midi : +note;\r\n    return isMidiRange(value) ? value : null;\r\n};\r\nvar midiToFreq = function (midi, tuning) {\r\n    if (tuning === void 0) { tuning = 440; }\r\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\r\n};\r\nvar freq = function (note) { return props(note).freq || midiToFreq(note); };\r\nvar L2 = Math.log(2);\r\nvar L440 = Math.log(440);\r\nvar freqToMidi = function (freq) {\r\n    var v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n};\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar oct = function (str) { return props(str).oct; };\r\nvar LETTERS = \"CDEFGAB\";\r\nvar stepToLetter = function (step) { return LETTERS[step]; };\r\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\r\nvar numToStr = function (num, op) {\r\n    return typeof num !== \"number\" ? \"\" : op(num);\r\n};\r\nvar altToAcc = function (alt) {\r\n    return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); });\r\n};\r\nvar from = function (fromProps, baseNote) {\r\n    if (fromProps === void 0) { fromProps = {}; }\r\n    if (baseNote === void 0) { baseNote = null; }\r\n    var _a = baseNote\r\n        ? Object.assign({}, props(baseNote), fromProps)\r\n        : fromProps, step = _a.step, alt = _a.alt, oct = _a.oct;\r\n    if (typeof step !== \"number\")\r\n        return null;\r\n    var letter = stepToLetter(step);\r\n    if (!letter)\r\n        return null;\r\n    var pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n};\r\nvar build = from;\r\nfunction fromMidi(num, sharps) {\r\n    if (sharps === void 0) { sharps = false; }\r\n    num = Math.round(num);\r\n    var pcs = sharps === true ? SHARPS : FLATS;\r\n    var pc = pcs[num % 12];\r\n    var o = Math.floor(num / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar simplify = function (note, sameAcc) {\r\n    if (sameAcc === void 0) { sameAcc = true; }\r\n    var _a = props(note), alt = _a.alt, chroma = _a.chroma, midi = _a.midi;\r\n    if (chroma === null)\r\n        return null;\r\n    var alteration = alt;\r\n    var useSharps = sameAcc === false ? alteration < 0 : alteration > 0;\r\n    return midi === null\r\n        ? pc(fromMidi(chroma, useSharps))\r\n        : fromMidi(midi, useSharps);\r\n};\r\nvar enharmonic = function (note) { return simplify(note, false); };\n\nexport { names, tokenize, props, name, pc, midi, midiToFreq, freq, freqToMidi, chroma, oct, stepToLetter, altToAcc, from, build, fromMidi, simplify, enharmonic };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n *\n * Tonal array utilities. Create ranges, sort notes, ...\n *\n * @example\n * import * as Array;\n * Array.sort([\"f\", \"a\", \"c\"]) // => [\"C\", \"F\", \"A\"]\n *\n * @example\n * const Array = require(\"tonal-array\")\n * Array.range(1, 4) // => [1, 2, 3, 4]\n *\n * @module Array\n */\nimport { props, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n *\n * @example\n * Array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * Array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b\n      ? ascR(a, b - a + 1)\n      : descR(a, a - b + 1);\n}\n/**\n *\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n * @example\n * Array.rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * Array.compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (name) {\n  var m = props(name).midi;\n  return m !== null ? m : props(name + \"-100\").midi;\n};\n\n/**\n * Sort an array of notes in ascending order\n *\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n *\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisherâ€“Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * Array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of an array\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","var IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\r\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nvar TYPES = \"PMMPPMM\";\r\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\r\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\r\nvar names = function (types) {\r\n    return typeof types !== \"string\"\r\n        ? NAMES.slice()\r\n        : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; });\r\n};\r\nvar tokenize = function (str) {\r\n    var m = REGEX.exec(\"\" + str);\r\n    if (m === null)\r\n        return null;\r\n    return (m[1] ? [m[1], m[2]] : [m[4], m[3]]);\r\n};\r\nvar NO_IVL = Object.freeze({\r\n    name: null,\r\n    num: null,\r\n    q: null,\r\n    step: null,\r\n    alt: null,\r\n    dir: null,\r\n    type: null,\r\n    simple: null,\r\n    semitones: null,\r\n    chroma: null,\r\n    oct: null\r\n});\r\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\r\nvar qToAlt = function (type, q) {\r\n    if (q === \"M\" && type === \"M\")\r\n        return 0;\r\n    if (q === \"P\" && type === \"P\")\r\n        return 0;\r\n    if (q === \"m\" && type === \"M\")\r\n        return -1;\r\n    if (/^A+$/.test(q))\r\n        return q.length;\r\n    if (/^d+$/.test(q))\r\n        return type === \"P\" ? -q.length : -q.length - 1;\r\n    return null;\r\n};\r\nvar altToQ = function (type, alt) {\r\n    if (alt === 0)\r\n        return type === \"M\" ? \"M\" : \"P\";\r\n    else if (alt === -1 && type === \"M\")\r\n        return \"m\";\r\n    else if (alt > 0)\r\n        return fillStr(\"A\", alt);\r\n    else if (alt < 0)\r\n        return fillStr(\"d\", type === \"P\" ? alt : alt + 1);\r\n    else\r\n        return null;\r\n};\r\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\r\nvar properties = function (str) {\r\n    var t = tokenize(str);\r\n    if (t === null)\r\n        return NO_IVL;\r\n    var p = {\r\n        num: 0,\r\n        q: \"d\",\r\n        name: \"\",\r\n        type: \"M\",\r\n        step: 0,\r\n        dir: -1,\r\n        simple: 1,\r\n        alt: 0,\r\n        oct: 0,\r\n        semitones: 0,\r\n        chroma: 0,\r\n        ic: 0\r\n    };\r\n    p.num = +t[0];\r\n    p.q = t[1];\r\n    p.step = numToStep(p.num);\r\n    p.type = TYPES[p.step];\r\n    if (p.type === \"M\" && p.q === \"P\")\r\n        return NO_IVL;\r\n    p.name = \"\" + p.num + p.q;\r\n    p.dir = p.num < 0 ? -1 : 1;\r\n    p.simple = (p.num === 8 || p.num === -8\r\n        ? p.num\r\n        : p.dir * (p.step + 1));\r\n    p.alt = qToAlt(p.type, p.q);\r\n    p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\r\n    p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\r\n    p.chroma = ((((p.dir * (SIZES[p.step] + p.alt)) % 12) + 12) %\r\n        12);\r\n    return Object.freeze(p);\r\n};\r\nvar cache = {};\r\nfunction props(str) {\r\n    if (typeof str !== \"string\")\r\n        return NO_IVL;\r\n    return cache[str] || (cache[str] = properties(str));\r\n}\r\nvar num = function (str) { return props(str).num; };\r\nvar name = function (str) { return props(str).name; };\r\nvar semitones = function (str) { return props(str).semitones; };\r\nvar chroma = function (str) { return props(str).chroma; };\r\nvar ic = function (ivl) {\r\n    if (typeof ivl === \"string\")\r\n        ivl = props(ivl).chroma;\r\n    return typeof ivl === \"number\" ? CLASSES[ivl % 12] : null;\r\n};\r\nvar build = function (_a) {\r\n    var _b = _a === void 0 ? {} : _a, num = _b.num, step = _b.step, alt = _b.alt, _c = _b.oct, oct = _c === void 0 ? 1 : _c, dir = _b.dir;\r\n    if (step !== undefined)\r\n        num = step + 1 + 7 * oct;\r\n    if (num === undefined)\r\n        return null;\r\n    if (typeof alt !== \"number\")\r\n        return null;\r\n    var d = typeof dir !== \"number\" ? \"\" : dir < 0 ? \"-\" : \"\";\r\n    var type = TYPES[numToStep(num)];\r\n    return (d + num + altToQ(type, alt));\r\n};\r\nvar simplify = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    return intervalProps.simple + intervalProps.q;\r\n};\r\nvar invert = function (str) {\r\n    var p = props(str);\r\n    if (p === NO_IVL)\r\n        return null;\r\n    var intervalProps = p;\r\n    var step = (7 - intervalProps.step) % 7;\r\n    var alt = intervalProps.type === \"P\" ? -intervalProps.alt : -(intervalProps.alt + 1);\r\n    return build({ step: step, alt: alt, oct: intervalProps.oct, dir: intervalProps.dir });\r\n};\r\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\r\nvar fromSemitones = function (num) {\r\n    var d = num < 0 ? -1 : 1;\r\n    var n = Math.abs(num);\r\n    var c = n % 12;\r\n    var o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n};\n\nexport { names, tokenize, qToAlt, altToQ, props, num, name, semitones, chroma, ic, build, simplify, invert, fromSemitones };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n *\n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // es6\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"C3\", \"C4\") // => \"1P\"\n *\n * @example\n * // es6 import selected functions\n * import { interval, semitones, transpose } from \"tonal-distance\"\n *\n * semitones(\"C\" ,\"D\") // => 2\n * interval(\"C4\", \"G4\") // => \"5P\"\n * transpose(\"C4\", \"P5\") // => \"G4\"\n *\n * @example\n * // included in tonal facade\n * const Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(\"C4\", \"P5\")\n * Tonal.Distance.transposeBy(\"P5\", \"C4\")\n *\n * @module Distance\n */\nimport { props as noteProps, build as fromNote } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from \"C\":\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor((f * 7) / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(noteProps);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n *\n * This function can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranpose } from \"tonal-distance\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * // it works with pitch classes\n * transpose(\"D\", \"3M\") // => \"F#\"\n * // can be partially applied\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(transpose(\"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return fromNote(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths.\n *\n * It can be partially applied.\n *\n * @function\n * @param {String} pitchClass - the pitch class\n * @param {Integer} fifhts - the number of fifths\n * @return {String} the transposed pitch class\n *\n * @example\n * import { trFifths } from \"tonal-transpose\"\n * [0, 1, 2, 3, 4].map(trFifths(\"C\")) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n * // or using tonal\n * Distance.trFifths(\"G4\", 1) // => \"D\"\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return fromNote(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n *\n * Can be partially applied.\n *\n * @param {String} to - note or pitch class\n * @param {String} from - note or pitch class\n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n *\n * Can be partially applied.\n *\n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranposeBy } from \"tonal-distance\"\n * transposeBy(\"3m\", \"5P\") // => \"7m\"\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals\n *\n * Can be partially applied.\n *\n * @param {String} interval1\n * @param {String} interval2\n * @return {String} the resulting interval\n * @example\n * import { add } from \"tonal-distance\"\n * add(\"3m\", \"5P\") // => \"7m\"\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n *\n * Can be partially applied\n *\n * @param {String} minuend\n * @param {String} subtrahend\n * @return {String} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes\n * (both must be pitch classes and the interval is always ascending)\n *\n * Can be partially applied\n *\n * @param {String} from - distance from\n * @param {String} to - distance to\n * @return {String} the interval distance\n *\n * @example\n * import { interval } from \"tonal-distance\"\n * interval(\"C2\", \"C3\") // => \"P8\"\n * interval(\"G\", \"B\") // => \"M3\"\n *\n * @example\n * import * as Distance from \"tonal-distance\"\n * Distance.interval(\"M2\", \"P5\") // => \"P4\"\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor(((t[0] - f[0]) * 7) / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n *\n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from \"tonal-distance\"\n * semitones(\"C3\", \"A2\") // => -3\n * // or use tonal\n * Tonal.Distance.semitones(\"C3\", \"G3\") // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = noteProps(from);\n  var t = noteProps(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * // es6\n * import PcSet from \"tonal-pcset\"\n * var PcSet = require(\"tonal-pcset\")\n *\n * PcSet.isEqual(\"c2 d5 e6\", \"c6 e3 d1\") // => true\n * ```\n *\n * ## API documentation\n *\n * @module PcSet\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate, range, compact } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar clen = function (chroma) { return chroma.replace(/0/g, \"\").length; };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It\"s a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {String} a binary representation of the pitch class set\n * @example\n * PcSet.chroma([\"C\", \"D\", \"E\"]) // => \"1010100000000\"\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\nvar all = null;\n/**\n * Get a list of all possible chromas (all possible scales)\n * More information: http://allthescales.org/\n * @return {Array} an array of possible chromas from '10000000000' to '11111111111'\n *\n */\nexport function chromas(n) {\n  all = all || range(2048, 4095).map(function (n) { return n.toString(2); });\n  return typeof n === \"number\"\n    ? all.filter(function (chroma) { return clen(chroma) === n; })\n    : all.slice();\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * PcSet.modes([\"C\", \"D\", \"E\"]).map(PcSet.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {String} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * PcSet.isChroma(\"101010101010\") // => true\n * PcSet.isChroma(\"101001\") // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it\"s intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * PcSet.intervals(\"1010100000000\") => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * PcSet.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = PcSet.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set\n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = PcSet.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C4\") // => true\n * PcSet.includes([\"C\", \"D\", \"E\"], \"C#4\") // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * PcSet.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * PcSet.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n *\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * // es6\n * import * as Scale from \"tonal-scale\"\n * // es5\n * const Scale = require(\"tonal-scale\");\n *\n * @example\n * Scale.notes(\"Ab bebop\") // => [ \"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"Gb\", \"G\" ]\n * Scale.names() => [\"major\", \"minor\", ...]\n * @module Scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Object}\n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * Scale.names() // => [\"maj7\", ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {String} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<String>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * Scale.intervals(\"major\") // => [ \"1P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\" ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale.\n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {String} tonic\n * @param {String} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {String} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n *\n * @example\n * Scale.notes(\"C\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"C4\", \"major\") // => [ \"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\" ]\n * Scale.notes(\"A4\", \"no-scale\") // => []\n * Scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n *\n * @function\n * @param {String} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {String} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * Scale.tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * Scale.tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * Scale.tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {String} name - scale name\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {String} name\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {Array} notes\n * @return {Array}\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of scale names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Chord from \"tonal-chord\"\n * // es5\n * const Chord = require(\"tonal-chord\")\n *\n * @example\n * Chord.notes(\"CMaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n *\n * @module Chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * Chord.names() // => [\"maj7\", ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n *\n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n *\n * @function\n * @param {String} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n *\n * @function\n * @param {String} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: \"Cmaj7\") or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {String} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {String} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * Chord.notes(\"Cmaj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n * Chord.notes(\"C\", \"maj7\") // => [\"C\", \"E\", \"G\", \"B\"]\n */\nexport function notes(nameOrTonic, name) {\n  if (name) { return props(name).intervals.map(transpose(nameOrTonic)); }\n  var ref = tokenize(nameOrTonic);\n  var tonic = ref[0];\n  var type = ref[1];\n  return props(type).intervals.map(transpose(tonic));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n *\n * @function\n * @param {String} name\n * @return {Boolean}\n * @example\n * Chord.exists(\"CMaj7\") // => true\n * Chord.exists(\"Maj7\") // => true\n * Chord.exists(\"Ablah\") // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @function\n * @param {String} name\n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\nvar NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {String} name - the chord name\n * @return {Array} an array with [type, tonic]\n * @example\n * Chord.tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * Chord.tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * Chord.tokenize(\"mMaj7\") // => [ \"\", \"mMaj7\" ]\n * Chord.tokenize(\"Cnonsense\") // => [ \"C\", \"nonsense\" ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n  // aug is augmented (see https://github.com/danigb/tonal/issues/55)\n  if (p[0] === \"A\" && p[3] === \"ug\") { return [\"\", \"aug\"]; }\n\n  if (NUM_TYPES.test(p[2])) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * // es6\n * import * as Dictionary from \"tonal-dictionary\"\n * // es5\n * const Dictionary = require(\"tonal-dictionary\")\n *\n * @example\n * Dictionary.chord(\"Maj7\") // => [\"1P\", \"3M\", \"5P\", \"7M\"]\n *\n * @module Dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { scale } from \"tonal-dictionary\"\n * scale(\"major\") // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {String} type\n * @return {Array} intervals\n * @example\n * import { chord } from \"tonal-dictionary\"\n * chord(\"Maj7\") // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `Tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `Tonal.Note.pc`\n *\n * It exports the following modules:\n * - Note\n * - Interval\n * - Distance\n * - Scale\n * - Chord\n * - PcSet\n *\n * Additionally this facade exports some functions without namespace (see \"Methods\" below)\n *\n * @example\n * // es6 modules\n * import * as Tonal from \"tonal\"\n * Tonal.Note.name(\"cx\") // => \"C##\"\n *\n * @example\n * import { Note } from \"tonal\"\n * Note.name(\"bb\") // => \"Bb\"\n *\n * @example\n * // es5 node modules\n * var Tonal = require(\"tonal\");\n * Tonal.Distance.transpose(Tonal.Note.pc(\"C#2\"), \"M3\") // => \"E#\"\n * Tonal.Chord.notes(\"Dmaj7\") // => [\"D\", \"F#\", \"A\", \"C#\"]\n *\n * @module Tonal\n */\nimport * as Array from \"tonal-array\";\nimport * as Note from \"tonal-note\";\nimport * as Interval from \"tonal-interval\";\nimport * as Distance from \"tonal-distance\";\nimport * as Dictionary from \"tonal-dictionary\";\nimport * as Scale from \"tonal-scale\";\nimport * as Chord from \"tonal-chord\";\nimport * as PcSet from \"tonal-pcset\";\n\nexport { Array, Note, Interval, Distance, Scale, Chord, PcSet, Dictionary };\n\n/**\n * Transpose a note by an interval\n * @function\n * @param {String} note\n * @param {String} interval\n * @return {String} the transported note\n * @see Distance.transpose\n */\nexport const transpose = Distance.transpose;\n\n/**\n * Get the interval from two notes\n * @function\n * @param {String} from\n * @param {String} to\n * @return {String} the interval in reverse shorthand notation\n * @see Distance.interval\n */\nexport const interval = Distance.interval;\n\n/**\n * Get note properties\n * @function\n * @param {String} note - the note name\n * @return {Object}\n * @see Note.props\n * @example\n * Tonal.note(\"A4\").chroma // => 9\n */\nexport const note = Note.props;\n\n/**\n * Get midi note number\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.midi\n * @example\n * Tonal.midi(\"A4\") // => 49\n */\nexport const midi = Note.midi;\n\n/**\n * Get note frequency using equal tempered tuning at 440\n * @function\n * @param {String} note\n * @return {Number}\n * @see Note.freq\n * @example\n * Tonal.freq(\"A4\") // => 440\n */\nexport const freq = Note.freq;\n\n/**\n * Get intervals from a chord type\n * @function\n * @param {String} type - the chord type (no tonic)\n * @return {Array} an array of intervals or undefined if the chord type is not known\n * @see Dictionary.chord\n * @example\n * Tonal.chord(\"m7b5\") // => [\"1P\", \"3m\", \"5d\", \"7m\"]\n */\nexport const chord = Dictionary.chord;\n\n/**\n * Get intervals from scale name\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Array} an array of intervals or undefiend if the scale is not kown\n * @example\n * Tonal.scale(\"major\") // => [\"1P\", \"2M\", \"3M\"...]\n */\nexport const scale = Dictionary.scale;\n"],"names":["tokenize","str","m","REGEX","exec","toUpperCase","replace","fromMidi","num","sharps","Math","round","SHARPS","FLATS","floor","ascR","b","n","a","descR","range","rotate","times","arr","len","length","slice","concat","sort","src","compact","map","name","height","unique","filter","i","props","NO_IVL","cache","properties","unaltered","f","transpose","note","interval","arguments","encodeNote","encodeIvl","tr","fromNote","decode","trFifths","fifths","from","to","t","transposeBy","addIntervals","ivl1","ivl2","dir","i1","i2","ibuild","decodeIvl","add","subtract","d","semitones","noteProps","midi","chroma","set","isChroma","Array","isArray","chr","forEach","join","chromas","all","toString","clen","modes","normalize","binary","split","_","r","test","intervals","IVLS","isEqual","s1","s2","s","isSubsetOf","notes","pcsetNum","isSupersetOf","includes","nameOrTonic","p","exists","undefined","scale","indexOf","tonic","noteName","substring","ref","type","NUM_TYPES","NAMES","names","accTypes","acc","NO_NOTE","Object","freeze","pc","step","alt","oct","octStr","freq","SEMI","fn","tokens","letter","charCodeAt","midiToFreq","isMidiRange","value","tuning","pow","L2","log","L440","freqToMidi","v","stepToLetter","fillStr","numToStr","op","altToAcc","fromProps","baseNote","_a","assign","build","simplify","sameAcc","alteration","useSharps","enharmonic","shuffle","rnd","random","permutations","reduce","perm","e","pos","newPerm","splice","RegExp","SIZES","CLASSES","types","q","simple","abs","qToAlt","altToQ","numToStep","ic","ivl","_b","_c","intervalProps","invert","IN","IQ","fromSemitones","c","o","FIFTHS","fOcts","FIFTH_OCTS","encode","STEPS","memo","encoder","iprops","isDescending","notechr","ivlchr","parseInt","dictionary","raw","keys","data","index","ivls","push","key","alias","allKeys","dict","combine","sdata","chord","cdata","pcset","NO_SCALE","setnum","modeNames","tonics","pcsetModes","x","chords","inScale","toScale","supersets","isSuperset","subsets","isSubset","NO_CHORD","Distance.transpose","Distance.interval","Note.props","Note.midi","Note.freq","Dictionary.chord","Dictionary.scale"],"mappings":"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"}